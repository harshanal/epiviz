[{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Harshana Liyanage. Author, maintainer. Alex Bhattacharya. Author. Liam Fitzpatrick. Author. James Leatherland. Author. Sudha Aurumugam. Author. Jordan Worth. Author. James Duke. Author. Emma Parker. Author. Karen Crawford. Contributor. Charlie Turner. Contributor. Frederick Sloots. Contributor. Isaac Florence. Contributor.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Liyanage H, Bhattacharya , Fitzpatrick L, Leatherland J, Aurumugam S, Worth J, Duke J, Parker E (2025). epiviz: Data Visualisation Functions Epidemiological Data Science Products. R package version 0.1.0.","code":"@Manual{,   title = {epiviz: Data Visualisation Functions for Epidemiological Data Science Products},   author = {Harshana Liyanage and Alex Bhattacharya and Liam Fitzpatrick and James Leatherland and Sudha Aurumugam and Jordan Worth and James Duke and Emma Parker},   year = {2025},   note = {R package version 0.1.0}, }"},{"path":"/index.html","id":"epiviz-","dir":"","previous_headings":"","what":"Data Visualisation Functions for Epidemiological Data Science Products","title":"Data Visualisation Functions for Epidemiological Data Science Products","text":"epiviz provides easy--use data visualisation functions R data science products. package includes functions create range static interactive visualisations. visualisation function can produce either static (ggplot2) dynamic (plotly/leaflet) output using set parameters, allowing users easily switch visualisation types simply changing dynamic flag.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Data Visualisation Functions for Epidemiological Data Science Products","text":"epiviz can installed GitHub using following code:","code":"# Install epiviz remotes::install_github('ukhsa-collaboration/epiviz')  # To install the development version remotes::install_github(\"ukhsa-collaboration/epiviz@dev\")"},{"path":"/index.html","id":"features","dir":"","previous_headings":"","what":"Features","title":"Data Visualisation Functions for Epidemiological Data Science Products","text":"following visualisation functions available current release epiviz: line_chart(): Creates line charts options grouping, dual axes, threshold lines, confidence limits (ribbons error bars). point_chart(): Creates scatter/point charts options grouping, sizing points values, custom shapes, confidence intervals. col_chart(): Creates column charts options grouping, dual axes, threshold lines, confidence limits (ribbons error bars). epi_curve(): Creates epidemic curves options different time periods, rolling averages, cumulative sums, grouping categories. epi_map(): Creates choropleth maps customisable colour scales, labels, boundaries different administrative levels. age_sex_pyramid(): Creates age-sex pyramids customisable age bands confidence intervals. visualisation functions follow consistent interface:","code":"function_name(   dynamic = FALSE,  # Set to TRUE for interactive plotly/leaflet output   base = NULL,      # Optional base plot to add to   params = list(    # List of parameters controlling the visualisation     df = data,      # Data frame containing the data to visualise     ...             # Function-specific parameters   ),   ...               # Additional arguments passed to underlying plotting functions )"},{"path":"/index.html","id":"key-features","dir":"","previous_headings":"Features","what":"Key Features","title":"Data Visualisation Functions for Epidemiological Data Science Products","text":"Consistent Interface: functions use parameter structure, making easy learn use package. Static/Dynamic Flexibility: Switch static (ggplot2) interactive (plotly/leaflet) visualisations changing single parameter. Customisation Options: Extensive parameters customising colours, labels, axes, legends, . Confidence Intervals: Support displaying confidence intervals across different visualisation types. Grouping Support: Easily create grouped visualisations appropriate legends. Dual Axes: Support secondary y-axes applicable chart types. Threshold Lines: Add horizontal reference lines applicable chart types.","code":""},{"path":[]},{"path":"/index.html","id":"llm-interpretation","dir":"","previous_headings":"Experimental Features","what":"LLM Interpretation","title":"Data Visualisation Functions for Epidemiological Data Science Products","text":"package includes experimental function llm_interpret() uses Large Language Models (LLMs) automatically interpret epidemiological data visualisations. function can: Generate narrative interpretations data frames Describe analyse ggplot visualisations Provide epidemiologically relevant observations","code":"# Example: Interpret a data frame interpretation <- llm_interpret(   input = summarised_df,   word_limit = 150 )  # Example: Interpret a ggplot visualisation plot <- line_chart(   dynamic = FALSE,   params = list(     df = summarised_df,     x = \"specimen_date\",     y = \"count\",     group_var = \"organism_species_name\"   ) ) plot_interpretation <- llm_interpret(plot)"},{"path":"/index.html","id":"supported-llm-providers","dir":"","previous_headings":"Experimental Features > LLM Interpretation","what":"Supported LLM Providers","title":"Data Visualisation Functions for Epidemiological Data Science Products","text":"function supports multiple LLM providers: OpenAI: Models like gpt-4o, gpt-4o-mini, o1-mini Google Gemini: Models like gemini-1.5-flash Anthropic Claude: Models like claude-1","code":""},{"path":"/index.html","id":"environment-variable-setup","dir":"","previous_headings":"Experimental Features > LLM Interpretation","what":"Environment Variable Setup","title":"Data Visualisation Functions for Epidemiological Data Science Products","text":"use llm_interpret() function, need set following environment variables: can set environment variables .Renviron file persistent configuration:","code":"# In your .Renviron file or before calling the function: Sys.setenv(LLM_PROVIDER = \"openai\")  # Choose from: \"openai\", \"gemini\", \"claude\" Sys.setenv(LLM_API_KEY = \"your-api-key-here\") Sys.setenv(LLM_MODEL = \"gpt-4o\")  # Use an appropriate model for your chosen provider # .Renviron file LLM_PROVIDER=openai LLM_API_KEY=your-api-key-here LLM_MODEL=gpt-4o"},{"path":"/index.html","id":"package-data","dir":"","previous_headings":"","what":"Package data","title":"Data Visualisation Functions for Epidemiological Data Science Products","text":"epiviz includes anonymised sample dataset SGSS laboratory database: lab_data() Second Generation Surveillance System (SGSS) data asset held UK Health Security Agency (formerly Public Health England) routinely automatically collects laboratory data across England. Laboratories return data organisms isolated samples organism species, specimen type, sampling date antimicrobial susceptibility testing results. data routinely used public health surveillance epidemiology England.","code":""},{"path":[]},{"path":"/index.html","id":"line-chart","dir":"","previous_headings":"Examples","what":"Line Chart","title":"Data Visualisation Functions for Epidemiological Data Science Products","text":"","code":"# Create a static line chart line_chart(   dynamic = FALSE,   params = list(     df = summarised_df,     x = \"specimen_date\",     y = \"count\",     group_var = \"organism_species_name\",     line_colour = c(\"blue\", \"green\", \"orange\"),     line_type = c(\"solid\", \"dotted\", \"dashed\")   ) )  # Convert to an interactive plotly chart by changing dynamic to TRUE line_chart(   dynamic = TRUE,   params = list(     df = summarised_df,     x = \"specimen_date\",     y = \"count\",     group_var = \"organism_species_name\",     line_colour = c(\"blue\", \"green\", \"orange\"),     line_type = c(\"solid\", \"dotted\", \"dashed\")   ) )"},{"path":"/index.html","id":"age-sex-pyramid","dir":"","previous_headings":"Examples","what":"Age-Sex Pyramid","title":"Data Visualisation Functions for Epidemiological Data Science Products","text":"","code":"# Create a static age-sex pyramid age_sex_pyramid(   dynamic = FALSE,   params = list(     df = lab_data,     var_map = list(       date_of_birth = 'date_of_birth',       sex = 'sex'     ),     grouped = FALSE,     colours = c(\"pink\", \"blue\")   ) )  # Convert to an interactive plotly chart by changing dynamic to TRUE age_sex_pyramid(   dynamic = TRUE,   params = list(     df = lab_data,     var_map = list(       date_of_birth = 'date_of_birth',       sex = 'sex'     ),     grouped = FALSE,     colours = c(\"pink\", \"blue\")   ) )"},{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 epiviz authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/reference/adorn_dates.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to adorn dates with appropriate formatting — adorn_dates","title":"Function to adorn dates with appropriate formatting — adorn_dates","text":"Function adorn dates appropriate formatting","code":""},{"path":"/reference/adorn_dates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to adorn dates with appropriate formatting — adorn_dates","text":"","code":"adorn_dates(df, date_var)"},{"path":"/reference/agesex_pyramid_grouped.html","id":null,"dir":"Reference","previous_headings":"","what":"Age Sex Pyramid using grouped data — agesex_pyramid_grouped","title":"Age Sex Pyramid using grouped data — agesex_pyramid_grouped","text":"Age Sex Pyramid using grouped data","code":""},{"path":"/reference/agesex_pyramid_grouped.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Age Sex Pyramid using grouped data — agesex_pyramid_grouped","text":"","code":"agesex_pyramid_grouped(df, colours, x_breaks, y_title, text_size, conf_limits)"},{"path":"/reference/agesex_pyramid_grouped.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Age Sex Pyramid using grouped data — agesex_pyramid_grouped","text":"df Data frame following columns names given age_group Character type. Age group can given ranges (e.g. \"0-4\",\"5-18\", \"19-64\", \"65+\") sex Character type. Must coded \"Female\" \"Male\" value Numeric type. Numerical value used pyramid (can proportion cases) lowercl Optional. Numeric type. Lower confidence limits value (required conf_limits=TRUE) uppercl Optional. Numeric type. Upper confidence limits value (required conf_limits=TRUE) colours List colours genders HEX format order Female, Male. Default values: c(\"#003B5C\", \"#007C91\") x_breaks Number ticks X axis. Default 20. y_title Title appears Y axis string. text_size Text size can modified providing number. Default 15. conf_limits Boolean variable. TRUE, error bars displayed. TRUE, data frame include lowercl uppercl columns.","code":""},{"path":"/reference/agesex_pyramid_grouped.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Age Sex Pyramid using grouped data — agesex_pyramid_grouped","text":"Returns age-sex pyramid ggplot object","code":""},{"path":"/reference/agesex_pyramid_grouped.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Age Sex Pyramid using grouped data — agesex_pyramid_grouped","text":"","code":"if (FALSE) { data <- data.frame(  age_group = rep(c(\"0-4\", \"5-18\", \"19-64\", \"65+\"), each = 2),  sex = rep(c(\"Female\", \"Male\"), times = 4),  value = c(110, 90, 80, 70, 60, 50, 40, 30) )  agesex_pyramid_grouped(data, x_breaks=10) }"},{"path":"/reference/age_sex_pyramid.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate an Age-Sex Pyramid — age_sex_pyramid","title":"Generate an Age-Sex Pyramid — age_sex_pyramid","text":"function creates age-sex pyramid visualisation, either static ggplot interactive plotly chart. function can take either line list (ungrouped data) already grouped data input. using line list, function processes data, groups age sex, generates pyramid. grouped data provided, directly creates pyramid.","code":""},{"path":"/reference/age_sex_pyramid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate an Age-Sex Pyramid — age_sex_pyramid","text":"","code":"age_sex_pyramid(   dynamic = FALSE,   base = NULL,   params = list(df, var_map = list(age = \"age\", date_of_birth = \"date_of_birth\", sex =     \"sex\", age_group = \"age_group\", value = \"value\", lowercl = \"lowercl\", uppercl =     \"uppercl\"), colours = c(\"#440154\", \"#2196F3\"), x_breaks = 10, y_title =     \"Age group (years)\", x_title = \"Number of cases\", text_size = 12, conf_limits =     FALSE, age_breakpoints = c(0, 5, 19, 65, Inf), age_calc_refdate = Sys.Date(), grouped     = FALSE, legend_position = \"top\", legend_title = \"\") )"},{"path":"/reference/age_sex_pyramid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate an Age-Sex Pyramid — age_sex_pyramid","text":"dynamic Logical. TRUE, function returns interactive plotly chart. FALSE, static ggplot chart returned. base optional base plot add pyramid . Default NULL. params list parameters including: df Data frame containing data used. var_map list mapping variable names data frame expected names used function. age Name column containing age values. Default 'age'. date_of_birth Name column containing date birth values. Default 'date_of_birth'. sex Name column containing sex values. Default 'sex'. age_group Name column containing pre-grouped age groups (grouped = TRUE). value Name column containing value counts (grouped = TRUE). lowercl Name column containing lower confidence limits (conf_limits = TRUE). uppercl Name column containing upper confidence limits (conf_limits = TRUE). colours vector colours used plot. Default c(\"#440154\", \"#fde725\"). x_breaks Number breaks x-axis. Default 10. y_title Title y-axis. Default \"Individual count\". x_title Title x-axis. Default \"Number cases\". text_size Size text plot. Default 12. conf_limits Logical. TRUE, confidence limits displayed pyramid. Default FALSE. age_breakpoints numeric vector specifying breakpoints age groups. Default c(0, 5, 19, 65, Inf). age_calc_refdate Reference date calculating age date birth. Default Sys.Date(). grouped Logical. TRUE, assumes data pre-grouped age sex. FALSE, function processes line list data. Default FALSE. legend_position Position legend. Default \"top\". legend_title Title legend. Default \"\".","code":""},{"path":"/reference/age_sex_pyramid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate an Age-Sex Pyramid — age_sex_pyramid","text":"ggplot plotly object representing age-sex pyramid, depending value dynamic.","code":""},{"path":"/reference/age_sex_pyramid.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate an Age-Sex Pyramid — age_sex_pyramid","text":"grouped = FALSE, function processes line list grouping data age sex, calculating age based either provided age column date birth, generating age-sex pyramid. grouped = TRUE, assumes data already grouped uses provided values directly generate pyramid.","code":""},{"path":"/reference/age_sex_pyramid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate an Age-Sex Pyramid — age_sex_pyramid","text":"","code":"if (FALSE) { # Example using a line list df <- epiviz::lab_data age_sex_pyramid(   dynamic = FALSE,   params = list(     df = df,     var_map = list(age = 'age', date_of_birth = 'date_of_birth', sex = 'sex'),     grouped = FALSE   ) )  # Example using pre-grouped data grouped_df <- data.frame(   age_group = c(\"0-4\", \"5-18\", \"19-64\", \"65+\"),   sex = c(\"Male\", \"Female\"),   value = c(100, 120, 150, 80),   lowercl = c(90, 110, 140, 70),   uppercl = c(110, 130, 160, 90) ) age_sex_pyramid(   dynamic = FALSE,   params = list(     df = grouped_df,     var_map = list(age_group = 'age_group', sex = 'sex', value = 'value'),     grouped = TRUE   ) ) }"},{"path":"/reference/base_gg.html","id":null,"dir":"Reference","previous_headings":"","what":"Base ggplot object for line_chart, point_chart, and epi_curve — base_gg","title":"Base ggplot object for line_chart, point_chart, and epi_curve — base_gg","text":"Internal function create base ggplot object. Note function call needs proceeded environment(base_gg) <- environment() ensure function can find variables calling environment.","code":""},{"path":"/reference/base_gg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Base ggplot object for line_chart, point_chart, and epi_curve — base_gg","text":"","code":"base_gg()"},{"path":"/reference/base_gg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Base ggplot object for line_chart, point_chart, and epi_curve — base_gg","text":"","code":"if (FALSE) { environment(base_gg) <- environment() base <- base_gg() }"},{"path":"/reference/base_plotly.html","id":null,"dir":"Reference","previous_headings":"","what":"Creates base plotly object for use across other functions. Parameters are not passed explicitly to the function, so function call needs to be proceeded by environment(base_plotly) <- environment() — base_plotly","title":"Creates base plotly object for use across other functions. Parameters are not passed explicitly to the function, so function call needs to be proceeded by environment(base_plotly) <- environment() — base_plotly","text":"Creates base plotly object use across functions. Parameters passed explicitly function, function call needs proceeded environment(base_plotly) <- environment()","code":""},{"path":"/reference/base_plotly.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Creates base plotly object for use across other functions. Parameters are not passed explicitly to the function, so function call needs to be proceeded by environment(base_plotly) <- environment() — base_plotly","text":"","code":"base_plotly()"},{"path":"/reference/base_plotly.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Creates base plotly object for use across other functions. Parameters are not passed explicitly to the function, so function call needs to be proceeded by environment(base_plotly) <- environment() — base_plotly","text":"plotly object","code":""},{"path":"/reference/base_plotly.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Creates base plotly object for use across other functions. Parameters are not passed explicitly to the function, so function call needs to be proceeded by environment(base_plotly) <- environment() — base_plotly","text":"","code":"if (FALSE) { environment(base_plotly) <- environment() base <- base_plotly() }"},{"path":"/reference/col_chart.html","id":null,"dir":"Reference","previous_headings":"","what":"Column Chart — col_chart","title":"Column Chart — col_chart","text":"Creates column chart using either ggplot2 (static) plotly (dynamic).","code":""},{"path":"/reference/col_chart.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Column Chart — col_chart","text":"","code":"col_chart(   dynamic = FALSE,   base = NULL,   params = list(df = NULL, x = NULL, y = NULL, group_var = NULL, fill = \"blue\", y_axis =     \"y1\", position = \"dodge\", ci = NULL, lower = NULL, upper = NULL, error_colour =     \"red\", h_line = NULL, y_label = NULL, x_label = NULL, x_label_angle = NULL,     y_label_angle = NULL, x_labels_reverse = NULL, y_min_limit = NULL, y_max_limit =     NULL, x_axis_breaks = NULL, legend_pos = \"bottom\", remove_gridlines = NULL, percent =     NULL, cap_text = NULL, no_shift = FALSE),   ... )"},{"path":"/reference/col_chart.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Column Chart — col_chart","text":"dynamic Logical indicating whether produce dynamic (plotly) output. Default FALSE, return static ggplot output. base base ggplot object add column chart . Default NULL. params named list containing arguments used create plot: df: dataframe containing data plotted x: x value column name plotted y: y value column name plotted group_var: variable used group bars .e. region plotting region fill: colour fill columns y_axis: Either \"y1\" primary y-axis \"y2\" secondary y-axis position: positions bars plotted .e.\"dodge\", \"stack\" etc ci: Indicator using ribbon error bar geom (required), enter 'e' error bar, enter value ribbon lower: Lower value error/ribbon geom (mandatory ci argument passed) upper: Upper value error/ribbon geom (mandatory ci argument passed) error_colour: plotting group colour error bars ribbon h_line: display horizontal line valid integer passed y_label: provision y axis label x_label: provision x axis label x_label_angle: adjust x axis label degrees integer provided y_label_angle: adjust y axis label degrees integer provided x_labels_reverse: Enter argument value .e. 'y' reverse x labeling order y_min_limit: Set limit y axis scaling proving integer y_max_limit: Set limit x axis scaling proving integer x_axis_breaks: Modify x axis breaks providing integer legend_pos: Modify position legend (applicable) remove_gridlines: Enter argument value .e. 'y' remove grid lines percent: Enter argument value .e. 'y' include % symbol cap_text: Enter text caption appear plot no_shift: shift applied secondary y-axis ... Additional arguments passed geom_col static (ggplot2) plots plot_ly/add_trace dynamic (Plotly) plots, allowing custom styling columns (e.g., alpha, width, marker, etc.).","code":""},{"path":"/reference/col_chart.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Column Chart — col_chart","text":"ggplot plotly object depending value dynamic parameter","code":""},{"path":"/reference/col_chart.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Column Chart — col_chart","text":"","code":"if (FALSE) { library(dplyr) data <- epiviz::lab_data |>  group_by(organism_species_name) |>  summarise(Count=n())  col_chart(params = list(   df = data,   x = \"organism_species_name\",   y = \"Count\" )) }"},{"path":"/reference/datebreak_to_d3.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to convert ggplot scale_date(date_breaks) values to d3 date format for use in plotly dtick variable for date axis break setting. — datebreak_to_d3","title":"Function to convert ggplot scale_date(date_breaks) values to d3 date format for use in plotly dtick variable for date axis break setting. — datebreak_to_d3","text":"Function convert ggplot scale_date(date_breaks) values d3 date format use plotly dtick variable date axis break setting.","code":""},{"path":"/reference/datebreak_to_d3.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to convert ggplot scale_date(date_breaks) values to d3 date format for use in plotly dtick variable for date axis break setting. — datebreak_to_d3","text":"","code":"datebreak_to_d3(x)"},{"path":"/reference/datebreak_to_d3.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to convert ggplot scale_date(date_breaks) values to d3 date format for use in plotly dtick variable for date axis break setting. — datebreak_to_d3","text":"x string giving distance breaks like \"2 weeks\", \"10 years\". Valid specifications 'sec', 'min', 'hour', 'day', 'week', 'month' 'year', optionally followed 's'. See https://ggplot2.tidyverse.org/reference/scale_date.html","code":""},{"path":"/reference/datebreak_to_d3.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to convert ggplot scale_date(date_breaks) values to d3 date format for use in plotly dtick variable for date axis break setting. — datebreak_to_d3","text":"string format appropriate plotly dtick date break formatting.","code":""},{"path":"/reference/datebreak_to_d3.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Function to convert ggplot scale_date(date_breaks) values to d3 date format for use in plotly dtick variable for date axis break setting. — datebreak_to_d3","text":"","code":"if (FALSE) { datebreak_to_d3(\"2 months\")  datebreak_to_d3(\"1 week\") }"},{"path":"/reference/epi_curve.html","id":null,"dir":"Reference","previous_headings":"","what":"epi_curve — epi_curve","title":"epi_curve — epi_curve","text":"function producing either static (ggplot) dynamic (plotly) epidemic curve.","code":""},{"path":"/reference/epi_curve.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"epi_curve — epi_curve","text":"","code":"epi_curve(   dynamic = FALSE,   params = list(df = NULL, y = NULL, date_var = NULL, date_start = NULL, date_end = NULL,     time_period = \"use_date_var\", group_var = NULL, group_var_barmode = \"stack\",     fill_colours = \"lightblue\", bar_border_colour = \"transparent\", case_boxes = FALSE,     case_boxes_colour = \"white\", rolling_average_line = FALSE,     rolling_average_line_lookback = 7, rolling_average_line_colour = \"red\",     rolling_average_line_width = 1, rolling_average_line_legend_label =     \"Rolling average\", cumulative_sum_line = FALSE, cumulative_sum_line_colour =     \"darkblue\",       cumulative_sum_line_width = 1, cumulative_sum_line_legend_label =     \"Cumulative sum\", cumulative_sum_line_axis_title = \"Cumulative Sum\", chart_title =     NULL, chart_title_size = 13, chart_title_colour = \"black\", chart_footer = NULL,     chart_footer_size = 12, chart_footer_colour = \"black\", x_axis_title = NULL,     y_axis_title = NULL, x_axis_title_font_size = 11, y_axis_title_font_size = 11,     x_axis_label_angle = NULL, y_axis_label_angle = NULL, x_axis_label_font_size = 9,     y_axis_label_font_size = 9, y_limit_min = NULL,       y_limit_max = NULL,     x_axis_break_labels = NULL, y_axis_break_labels = NULL, y_axis_n_breaks = NULL,     show_gridlines = FALSE, show_axislines = TRUE, legend_title = \"\", legend_pos =     \"right\", legend_font_size = 8, legend_title_font_size = 8, hline = NULL, hline_colour     = \"black\", hline_width = 0.5, hline_type = \"dashed\", hline_label = NULL,     hline_label_colour = \"black\", hover_labels = NULL) )"},{"path":"/reference/epi_curve.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"epi_curve — epi_curve","text":"dynamic Logical indicating whether produce dynamic (plotly) output. Default FALSE, return static ggplot output. params named list containing arguments used create plot. df data frame containing data used create epi curve. date_var character, Name variable df containing dates used populate x-axis. y data pre-aggregated, name variable df containing aggregated values (.e. values used populate y-axis.) date_start date determine minimum value along x-axis. rows date_var < date_start excluded aggregates. date_end date determine maximum value along x-axis. rows date_var > date_end excluded aggregates. time_period time period used along x-axis. Options include c(\"day\",\"year\",\"month\",\"quarter\",\"year_month\",\"year_quarter\",      \"iso_year\",\"iso_week\",\"start_iso_year_week\",\"iso_year_week\",      \"use_date_var\"). Default = \"use_date_var\", indicates dates appear date_var column used populate x-axis. group_var Name variable df used define separate groups within bar, e.g. species region. group_var_barmode Indicates grouped bar data plotted. Options include c(\"group\",\"stack\"). Default = \"stack\". fill_colours Colours used fill bars chart. group_var provided, fill_colours must character containing single colour (default = \"lightblue\"). group_var provided, fill_colours must character vector colours number elements equal number unique groups group_var. named character vector provided names values within group_var, colour mapped corresponding value group_var output chart legend (e.g. c(\"KLEBSIELLA PNEUMONIAE\" = \"#007C91\", \"STAPHYLOCOCCUS    AUREUS\" = \"#8A1B61\", \"PSEUDOMONAS AERUGINOSA\" = \"#FF7F32\") setNames(c(\"#007C91\",    \"#8A1B61\",\"#FF7F32\"), c(\"KLEBSIELLA PNEUMONIAE\",\"STAPHYLOCOCCUS AUREUS\",\"PSEUDOMONAS AERUGINOSA\"))) bar_border_colour Colour border around bar. border colour drawn default. case_boxes boolean, case_boxes = TRUE boundary box drawn around case within bar. Defaults case_boxes = FALSE. case_boxes_colour colour border around case box case_boxes =    TRUE. Default = \"white\". rolling_average_line boolean, rolling_average_line = TRUE, line showing rolling mean added plot. Default = FALSE. rolling_average_line_lookback Integer denoting lookback window across rolling mean calculated (including current time interval). integer denotes division within time_period, e.g. time_period = \"year_month\" rolling_average_line_lookback = 3 rolling mean calculated using values current month previous 2 months, time_period = \"day\" rolling_average_line_lookback = 7 rolling mean calculated using values previous 7 days including current day. less values within lookback window rolling_average_line_lookback, mean calculated incomplete window using values available (.e. rolling_average_line_lookback = 7 time_period = \"day\" 4 values within previous 7 days, rolling mean calculated 4 available values.) rolling_average_line_colour character Colour rolling average line. Default = \"red\". rolling_average_line_width numeric Width rolling average line. Default = 1. rolling_average_line_legend_label character Label used rolling average line chart legend. cumulative_sum_line boolean, cumulative_sum_line_line = TRUE, line showing cumulative sum added plot. Default = FALSE. Values cumulative sum plotted secondary y-axis. cumulative_sum_line_colour character Colour cumulative line. Default = \"darkblue\". cumulative_sum_line_width numeric Width cumulative sum line. Default = 1. cumulative_sum_line_legend_label character Label used cumulative sum line chart legend. cumulative_sum_line_axis_title character Axis title cumulative sum line secondary axis. chart_title Text use chart title. chart_title_size Font size chart title. chart_title_colour Font colour chart title. chart_footer Text use chart footer. chart_footer_size Font size chart footer. chart_footer_colour Font colour chart footer. x_axis_title Text used x-axis title. Defaults name x-variable stated. y_axis_title Text used y-axis title. Defaults name y-variable stated. x_axis_title_font_size Font size x-axis title. y_axis_title_font_size Font size y-axis title. x_axis_label_angle Angle x-axis label text. y_axis_label_angle Angle y-axis label text. x_axis_label_font_size Font size x-axis tick labels. y_axis_label_font_size Font size y-axis tick labels. y_limit_min Lower limit y-axis. Default used provided. y_limit_max Upper limit y-axis. Default used provided. x_axis_break_labels Vector values use x-axis breaks. Defaults used provided. Values provided must match formatting time_period. y_axis_break_labels Vector values use y-axis breaks. Defaults used provided. y_axis_n_breaks Scales y-axis approximately n breaks. used y_axis_break_labels also provided. show_gridlines Logical show chart gridlines. Default = FALSE. show_axislines Logical show chart axis lines. Default = TRUE. legend_title Text used legend title. legend_pos Position legend. Permitted values = c(\"top\",\"bottom\",\"right\",\"left\") legend_font_size Font size used legend. legend_title_font_size Font size used legend title. hline Adds horizontal line across chart corresponding y-value. Multiple values may provided vector add multiple horizontal lines. hline_colour Colour horizontal lines hline provided. vector colours can provided colour individual hlines multiple hlines provided. hline_width Numerical width horizontal lines hline provided. vector numerical widths can provided individual hlines multiple hlines provided. hline_type Line style horizontal lines hline provided. vector line styles can provided style hlines multiple hlines provided. Permitted values = c(\"solid\", \"dotted\", \"dashed\", \"longdash\", \"dotdash\"). hline_label Text label horizontal lines hline provided. vector text strings can provided label individual hlines multiple hlines provided. hline_label_colour Colour horizontal line labels hline_labels provided. vector colours can provided colour individual hline_labels multiple hline_labels provided. hover_labels string, Text used hover-labels dynamic chart. Accepts html, use '%{x}' reference corresponding x-axis values (.e. date intervals) '%{y}' reference y-axis values, e.g. hover_labels = \"<b>Date:<\/b>    %{x}<br><b>Count:<\/b> %{y}\".","code":""},{"path":"/reference/epi_curve.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"epi_curve — epi_curve","text":"ggplot plotly object.","code":""},{"path":"/reference/epi_curve.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"epi_curve — epi_curve","text":"","code":"if (FALSE) {  # Example 1: Basic epi curve  # Create a basic epi curve using the epiviz::lab_data dataset library(epiviz)  basic_epi_curve <- epi_curve(   params = list(     df = lab_data,     date_var = \"specimen_date\",     date_start = \"2020-01-01\",     date_end = \"2023-12-31\",     time_period = \"year_month\",     fill_colours = \"#007C91\",     rolling_average_line = TRUE,     rolling_average_line_lookback = 3,     rolling_average_line_legend_label = \"3-month rolling average\",     chart_title = \"Laboratory Detections per Month\",     x_axis_title = \"Year - Month\",     y_axis_title = \"Number of detections\",     x_axis_label_angle = -90   ) )  basic_epi_curve     # Example 2: Create both static and dynamic epi curves using grouped data  library(epiviz)  # Define list of date breaks for x-axis; use every other ISO week in date range week_seq <- seq(as.Date(\"2021-01-01\"),as.Date(\"2022-05-31\"), by = '2 week') week_breaks <- paste0(lubridate::isoyear(week_seq),'-W',lubridate::isoweek(week_seq))  # Create parameter list params_list <- list(   df = lab_data,   date_var = \"specimen_date\",   date_start = \"2021-01-01\",   date_end = \"2022-05-31\",   time_period = \"iso_year_week\",   group_var = \"organism_species_name\",   group_var_barmode = \"stack\",   fill_colours = c(\"KLEBSIELLA PNEUMONIAE\" = \"#007C91\",                    \"STAPHYLOCOCCUS AUREUS\" = \"#8A1B61\",                    \"PSEUDOMONAS AERUGINOSA\" = \"#FF7F32\"),   rolling_average_line = TRUE,   rolling_average_line_legend_label = \"7-week rolling average\",   chart_title = \"Laboratory detections by species \\n 2021-01 - 2022-05\",   chart_footer = \"This chart has been created using simulated data.\",   x_axis_title = \"Year - ISO Week\",   y_axis_title = \"Number of detections\",   x_axis_label_angle = -90,   x_axis_break_labels = week_breaks,   y_axis_break_labels = seq(0, 250, 20),   chart_title_colour = \"#007C91\",   chart_footer_colour = \"#007C91\" )  # Create static epi curve static_curve <- epi_curve(params = params_list, dynamic = FALSE)  # Create dynamic epi curve dynamic_curve <- epi_curve(params = params_list, dynamic = TRUE)  # View both simultaneously using shiny app library(shiny) library(plotly) ui <- fluidPage(   plotOutput('static_curve'),   plotlyOutput('dynamic_curve') ) server <- function(input, output, session) {   output$static_curve <- renderPlot(static_curve)   output$dynamic_curve <- renderPlotly(dynamic_curve) } shinyApp(ui, server)     # Example 3: Create static and dynamic curves using grouped data, include cumulative # sum line and boxes around each case  library(epiviz)  # Create parameter list params_cases <- list(   df = lab_data,   date_var = \"specimen_date\",   date_start = \"2021-06-01\",   date_end = \"2021-07-31\",   time_period = \"day\",   group_var = \"organism_species_name\",   group_var_barmode = \"stack\",   fill_colours = c(\"#007C91\",\"#8A1B61\",\"#FF7F32\"),   case_boxes = TRUE,   rolling_average_line = TRUE,   rolling_average_line_legend_label = \"7-day rolling average\",   cumulative_sum_line = TRUE,   chart_title = \"Laboratory detections by species \\n June - July 2021\",   chart_title_colour = \"#007C91\",   hline = c(35),   hline_label = \"Threshold\",   hline_width = 0.5,   hline_colour = \"orange\",   hline_label_colour = \"orange\",   hline_type = \"dotdash\",   legend_title = \"Detected organisms\",   legend_pos = \"right\",   y_limit_max = 40,   x_axis_break_labels = as.character(seq(as.Date(\"2021-06-01\"),                                          as.Date(\"2021-07-31\"),                                          by = '2 days')),   y_axis_break_labels = seq(0, 40, 5),   x_axis_title = \"Date\",   y_axis_title = \"Number of detections\",   x_axis_label_angle = -90,   y_axis_label_angle = 90 )   # Create static and dynamic curves static_curve <- epi_curve(params = params_cases, dynamic = FALSE) dynamic_curve <- epi_curve(params = params_cases, dynamic = TRUE)  # View both simultaneously using shiny app library(shiny) library(plotly) ui <- fluidPage(   plotOutput('static_curve'),   plotlyOutput('dynamic_curve') ) server <- function(input, output, session) {   output$static_curve <- renderPlot(static_curve)   output$dynamic_curve <- renderPlotly(dynamic_curve) } shinyApp(ui, server)     # Example 4: Create static and dynamic curves using pre-aggregated data  library(epiviz)  # Define a dataframe containing the number of detections by region regional_detections <- lab_data |>   group_by(specimen_date, region) |>   summarise(detections = n()) |>   ungroup()   # Create parameter list params_regions <- list(   df = regional_detections,   y = \"detections\",   date_var = \"specimen_date\",   date_start = \"2021-10-01\",   date_end = \"2022-03-31\",   time_period = \"iso_year_week\",   group_var = \"region\",   group_var_barmode = \"stack\",   rolling_average_line = TRUE,   rolling_average_line_lookback = 3,   rolling_average_line_legend_label = \"3-week rolling average\",   rolling_average_line_colour = \"#007C91\",   rolling_average_line_width = 1.5,   cumulative_sum_line = TRUE,   cumulative_sum_line_colour = \"orange\",   chart_title = \"Laboratory Detections by Region \\nWinter 2021-22\",   chart_title_colour = \"#007C91\",   legend_title = \"Region\",   legend_pos = \"right\",   y_axis_break_labels = seq(0, 300, 50),   x_axis_title = \"ISO Week\",   y_axis_title = \"Number of detections\",   x_axis_label_angle = -90,   hover_labels = \"<b>Week:<\/b> %{x}<br><b>Count:<\/b> %{y}\" )   # Create static and dynamic curves static_curve <- epi_curve(params = params_regions, dynamic = FALSE) dynamic_curve <- epi_curve(params = params_regions, dynamic = TRUE)  # View both simultaneously using shiny app library(shiny) library(plotly) ui <- fluidPage(   plotOutput('static_curve'),   plotlyOutput('dynamic_curve') ) server <- function(input, output, session) {   output$static_curve <- renderPlot(static_curve)   output$dynamic_curve <- renderPlotly(dynamic_curve) } shinyApp(ui, server)   }"},{"path":"/reference/epi_map.html","id":null,"dir":"Reference","previous_headings":"","what":"epi_map — epi_map","title":"epi_map — epi_map","text":"function producing either static (ggplot) dynamic (leaflet) choropleth maps.","code":""},{"path":"/reference/epi_map.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"epi_map — epi_map","text":"","code":"epi_map(   dynamic = FALSE,   params = list(df = NULL, value_col = NULL, data_areacode = NULL, inc_shp = TRUE,     shp_name = NULL, shp_areacode = NULL, fill_palette = \"Blues\", fill_opacity = 1,     break_intervals = NULL, break_labels = NULL, force_cat = TRUE, n_breaks = NULL,     labels = NULL, map_title = \"\", map_title_size = 13, map_title_colour = \"black\",     map_footer = \"\", map_footer_size = 12, map_footer_colour = \"black\", area_labels =     FALSE, area_labels_topn = NULL, legend_title = \"\", legend_pos = \"topright\", map_zoom     = NULL, border_shape_name = NULL,       border_code_col = NULL, border_areaname =     NULL) )"},{"path":"/reference/epi_map.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"epi_map — epi_map","text":"dynamic Logical indicating whether produce dynamic (leaflet) output. Default FALSE, return static ggplot output. params named list containing arguements used map. df Data frame containing values used fill areas output map. Can include pre-merged shapefile data inc_shp = TRUE. value_col Name variable df used fill map areas. data_areacode Name variable df containing name code map areas plotted. (Mandatory shp_name argument passed). inc_shp boolean parameter indicate whether df already includes shapefile data. shp_name Data frame name filepath shapefile containing spatial information resultant map output. used inc_shp = TRUE. shp_areacode Name variable shp_name containing name code map areas plotted. (Mandatory shp_name argument passed). fill_palette Colour palette used fill map areas. Can provided either name RColorBrewer palette (e.g. fill_palette = \"YlOrRd\"), character containing single rgb colour code, hexcode, colour name used generate colour range (e.g. fill_palette = \"#007C91\"), character vector containing multiple rgb codes, hexcodes, colour names used generate colour range (e.g. c(\"#007C91\",\"purple\",\"red\")). Defaults RColorBrewer \"Blues\" palette.) fill_opacity numeric value 0 1 determine map fill-color opacity. break_intervals numeric vector interval points legend (Mandatory break_labels argument passed, break_intervals break_labels must equal length). break_labels vector labels include legend. (Mandatory break_labels argument passed, break_intervals break_labels must equal length). force_cat boolean parameter determine whether arguments passed break_labels used legend, even values present data. n_breaks Number break intervals. argument alternative supplying defined breaks via break_labels, provide number evenly distributed breaks specified (default = 5). break_labels argument passed, n_breaks ignored. labels name string variable df containing labels map area. dynamic = FALSE, labels positioned centre map area. dynamic = TRUE, labels appear hover-labels. dynamic = TRUE, labels can include HTML. map_title string determine map title. map_title_size font size map title. map_title_colour string determine map title colour. map_footer_size font size map footer. map_footer_colour string determine map title colour. area_labels boolean parameter add data_areacode static area labels map areas. dynamic = FALSE labels parameter alredy supplied, area_labels ignored. area_labels_topn numeric value display area_labels areas top n values value_col (e.g. area_labels_topn = 5, area_labels map areas top 5 values value_col displayed). legend_title string determine legend title. legend_pos string determine legend position. dynamic = TRUE, ggplot leaflet permissable legend positions can provided. dynamic = FALSE, leaflet permissable legend positions can provided (.e.\"topright\", \"bottomright\", \"bottomleft\", \"topleft\"). map_zoom single row data frame variables 'LAT', 'LONG', 'zoom' allows map zoomed specific region (e.g. data.frame(LONG = -2.547855, LAT = 53.00366, zoom = 6)). LAT = numerical latitude coordinate centre point zoom, LONG = numerical longitude coordinate centre point zoom, zoom = numerical value represent depth zoom. border_shape_name Optional filepath shapefile containing additional borders include output map. higher geography base map (e.g. creating map displaying UTLAs, shapefile containing regional boundaries higher used). boundaries contained within border_shape_name used, areas unfilled. border_code_col Variable name area code / name within border_shape_name. Required specific area within border shapefile required. border_areaname Character vector containing name specific areas within border_code_col plotted. supplied, boundaries included border_areaname plotted. supplied, boundaries areas within border_shape_name plotted.","code":""},{"path":"/reference/epi_map.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"epi_map — epi_map","text":"ggplot leaflet object.","code":""},{"path":"/reference/epi_map.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"epi_map — epi_map","text":"","code":"if (FALSE) {  # Example 1: Create a static map of Staphylococcus Aureus detections in London # Local Authority Districts.  # Define values for choropleth map using lab_data dataset London_staph_detections <- lab_data |>   filter(region == \"London\", organism_species_name == \"STAPHYLOCOCCUS AUREUS\") |>   group_by(local_authority_name) |>   summarise(detections = n())  # Create static map using London_LA_boundaries_2023 data London_staph_detections_map <- epi_map(   params = list(     df = London_staph_detections,     value_col = \"detections\",     data_areacode = \"local_authority_name\",     inc_shp = FALSE,     area_labels = TRUE,     shp_name = London_LA_boundaries_2023,     shp_areacode = \"LAD23NM\",     map_title = \"Staphylococcus Aureus detections in London Local Authority Districts\",     map_zoom = data.frame(LONG = c(-0.12776), LAT = c(51.50735), zoom = c(8.7)),     legend_title = \"Number of \\nDetections\",     legend_pos = \"right\") )    # Example 2: Create a static map of Klebsiella Pneumoniae detections in England # public health regions using data pre-merged with a shapefile.  # Define values for choropleth map using the lab_data dataset kleb_pneu_detections <- lab_data |>   filter(organism_species_name == \"KLEBSIELLA PNEUMONIAE\") |>   group_by(region) |>   summarise(detections = n()) |>   ungroup()  # Add column defining labels to apply to map areas kleb_pneu_detections <- kleb_pneu_detections |>   mutate(map_labels = paste0(region,\": \\n\",detections))  # Join with the PHEC_boundaries_2016 shapefile data kleb_pneu_detections_shp <- left_join(x = PHEC_boundaries_2016, y = kleb_pneu_detections,                                       by = c(\"phec16nm\" = \"region\"))  # Define parameter list for map function kleb_pneu_params <- list(   df = kleb_pneu_detections_shp,   value_col = \"detections\",   data_areacode = \"phec16nm\",   inc_shp = TRUE,   fill_palette = \"YlOrRd\",   fill_opacity = 0.7,   labels = \"map_labels\",   map_title = \"Number of Klebsiella Pneumoniae detections \\nin UK public health regions\",   map_title_size = 12,   map_title_colour = \"orangered\",   map_footer = \"Map represents simulated test data only.\",   map_footer_size = 10,   map_footer_colour = \"black\",   legend_title = \"Number of \\nDetections\",   legend_pos = \"topright\",   break_labels = c(\"0-499\",\"500-999\",\"1000-1499\",\"1500-1999\",\"2000-2499\",\"2500+\"),   break_intervals = c(0,500,1000,1500,2000,2500),   force_cat = TRUE )  # Create map kleb_pneu_detections_map <- epi_map(dynamic = FALSE, params = kleb_pneu_params)    # Example 3: Refactor the above map as dynamic map, only add area_labels for # the top 5 areas by number of detections, and add an additional border using # the UK_boundaries_2023 shapefile data.  # Create list of additional parameters kleb_pneu_params_add <- list(   area_labels = TRUE,   area_labels_topn = 5,   map_zoom = data.frame(LONG = c(-2.89479), LAT = c(54.793409), zoom = c(5)),   border_shape_name = UK_boundaries_2023 )  # Combine existing parameters list with additional parameters list kleb_pneu_params_dyn <- c(kleb_pneu_params, kleb_pneu_params_add)  # Create map kleb_pneu_map_dynamic <- epi_map(dynamic = TRUE, params = kleb_pneu_params_dyn)  }"},{"path":"/reference/get_os.html","id":null,"dir":"Reference","previous_headings":"","what":"Function for determining user's operating system credit: https://www.r-bloggers.com/2015/06/identifying-the-os-from-r/ — get_os","title":"Function for determining user's operating system credit: https://www.r-bloggers.com/2015/06/identifying-the-os-from-r/ — get_os","text":"Function determining user's operating system credit: https://www.r-bloggers.com/2015/06/identifying--os--r/","code":""},{"path":"/reference/get_os.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function for determining user's operating system credit: https://www.r-bloggers.com/2015/06/identifying-the-os-from-r/ — get_os","text":"","code":"get_os()"},{"path":"/reference/get_os.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function for determining user's operating system credit: https://www.r-bloggers.com/2015/06/identifying-the-os-from-r/ — get_os","text":"Name user's operating system","code":""},{"path":"/reference/get_os.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Function for determining user's operating system credit: https://www.r-bloggers.com/2015/06/identifying-the-os-from-r/ — get_os","text":"","code":"if (FALSE) { get_os() }"},{"path":"/reference/grapes-or-or-grapes.html","id":null,"dir":"Reference","previous_headings":"","what":"Default operator — %||%","title":"Default operator — %||%","text":"Default operator","code":""},{"path":"/reference/grapes-or-or-grapes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Default operator — %||%","text":"","code":"x %||% y"},{"path":"/reference/grapes-or-or-grapes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Default operator — %||%","text":"x First value y Second value (default)","code":""},{"path":"/reference/grapes-or-or-grapes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Default operator — %||%","text":"Returns x NULL, otherwise returns y","code":""},{"path":"/reference/grapes-or-or-grapes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Default operator — %||%","text":"","code":"if (FALSE) { NULL %||% 1  # returns 1 2 %||% 1     # returns 2 }"},{"path":"/reference/html_bold.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to apply html bold tags to input text strings for use in plotly font definitions. — html_bold","title":"Function to apply html bold tags to input text strings for use in plotly font definitions. — html_bold","text":"Function apply html bold tags input text strings use plotly font definitions.","code":""},{"path":"/reference/html_bold.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to apply html bold tags to input text strings for use in plotly font definitions. — html_bold","text":"","code":"html_bold(x)"},{"path":"/reference/html_bold.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to apply html bold tags to input text strings for use in plotly font definitions. — html_bold","text":"x text string","code":""},{"path":"/reference/html_bold.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to apply html bold tags to input text strings for use in plotly font definitions. — html_bold","text":"text string wrapped  html bold font","code":""},{"path":"/reference/html_bold.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Function to apply html bold tags to input text strings for use in plotly font definitions. — html_bold","text":"","code":"if (FALSE) { html_bold(\"Chart Title\") }"},{"path":"/reference/inv_scale_function.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to scale/shift secondary y axis data — inv_scale_function","title":"Function to scale/shift secondary y axis data — inv_scale_function","text":"Function scale/shift secondary y axis data","code":""},{"path":"/reference/inv_scale_function.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to scale/shift secondary y axis data — inv_scale_function","text":"","code":"inv_scale_function(x, scale, shift)"},{"path":"/reference/inv_scale_function.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to scale/shift secondary y axis data — inv_scale_function","text":"x value scaled/shifted scale value scale data shift value shift data ","code":""},{"path":"/reference/inv_scale_function.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to scale/shift secondary y axis data — inv_scale_function","text":"scaled/shifted data plot secondary y axis","code":""},{"path":"/reference/inv_scale_function.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Function to scale/shift secondary y axis data — inv_scale_function","text":"","code":"if (FALSE) { inv_scale_function(2,4,5) }"},{"path":"/reference/lab_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Synthetic Lab Data for EpiViz functions — lab_data","title":"Synthetic Lab Data for EpiViz functions — lab_data","text":"dataset containing synthetic lab data epidemiological visualisation purposes.","code":""},{"path":"/reference/lab_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Synthetic Lab Data for EpiViz functions — lab_data","text":"","code":"data(lab_data)"},{"path":"/reference/lab_data.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Synthetic Lab Data for EpiViz functions — lab_data","text":"data frame following columns: date_of_birth Date birth patients. sex Gender patients (Factor levels: \"Female\", \"Male\"). organism_species_name Organism species name (Factor levels: \"KLEBSIELLA PNEUMONIAE\"). specimen_date Date specimen collection. lab_code Laboratory codes (Factor unique levels). local_authority_name Name local authority. local_authority_code Code local authority. region Name UKHSA regions.","code":""},{"path":"/reference/lab_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Synthetic Lab Data for EpiViz functions — lab_data","text":"","code":"data(lab_data) head(lab_data) #>   date_of_birth    sex organism_species_name specimen_date lab_code #> 1    1938-10-05 Female KLEBSIELLA PNEUMONIAE    2020-05-24  BI20985 #> 2    1957-04-04   Male KLEBSIELLA PNEUMONIAE    2023-07-08  JH70033 #> 3    1927-06-24   Male STAPHYLOCOCCUS AUREUS    2023-02-24   CU5997 #> 4    1962-06-14   Male STAPHYLOCOCCUS AUREUS    2023-08-26   ES3851 #> 5    1953-07-20   Male STAPHYLOCOCCUS AUREUS    2022-04-07  YA29556 #> 6    1968-01-25   Male KLEBSIELLA PNEUMONIAE    2020-08-20  QF11124 #>        local_authority_name local_authority_code     region #> 1                  Worthing            E07000229 South East #> 2                   Reading            E06000038 South East #> 3                  Plymouth            E06000026 South West #> 4 Cheshire West and Chester            E06000050 North West #> 5            Northumberland            E06000057 North East #> 6                  Rochdale            E08000005 North West"},{"path":"/reference/line_chart.html","id":null,"dir":"Reference","previous_headings":"","what":"A function for producing either static (ggplot) or dynamic (plotly) line charts. — line_chart","title":"A function for producing either static (ggplot) or dynamic (plotly) line charts. — line_chart","text":"function generates line chart data frame using specified x y variables. Optionally, plot can rendered interactive Plotly object. function also allows grouping data based specified grouping variable.","code":""},{"path":"/reference/line_chart.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A function for producing either static (ggplot) or dynamic (plotly) line charts. — line_chart","text":"","code":"line_chart(   dynamic = FALSE,   base = NULL,   params = list(df, x, y, ci = NULL, lower = NULL, upper = NULL, error_colour =     c(\"#f2c75c\"), group_var, line_colour = c(\"blue\"), line_type = \"solid\", width = 1,     title = NULL, x_label = NULL, x_label_angle = NULL, y_label = NULL, y_label_angle =     NULL, y_percent = FALSE, st_theme = NULL, add_points = FALSE, show_gridlines = FALSE,     show_axislines = TRUE, legend_title = NULL, legend_position = NULL, hline = NULL,     hline_colour = \"red\", hline_label = NULL),   ... )"},{"path":"/reference/line_chart.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A function for producing either static (ggplot) or dynamic (plotly) line charts. — line_chart","text":"dynamic logical value. TRUE, line chart rendered Plotly object interactivity. FALSE, static ggplot2 object returned. base base plotly ggplot2 object add line chart . Default NULL. params list containing following elements: df data frame containing data plotted. x character string specifying name column df used x-axis. y character string specifying name column df used y-axis. group_var character string specifying name column df used grouping data. ci Optional. character string specifying column df confidence intervals. lower Optional. character string specifying column df lower bounds confidence intervals. upper Optional. character string specifying column df upper bounds confidence intervals. error_colour color error bars. Default #f2c75c. line_colour List colours lines. Default blue. line_type Line type single graph, list line types Permissable values: \"solid\", \"dotted\", \"dashed\", \"longdash\", \"dotdash\" width numeric value specifying width lines. title Optional. character string specifying title plot. x_label Optional. character string specifying label x-axis. x_label_angle Optional. numeric value specifying rotation angle x-axis labels. y_label Optional. character string specifying label y-axis. y_label_angle Optional. numeric value specifying rotation angle y-axis labels. y_percent Optional. logical value. TRUE, y-axis scaled percentages. st_theme Optional. ggplot2 theme object customize style plot. add_points Optional. logical value. TRUE, points added line chart. ... Additional arguments passed geom_line static (ggplot2) plots plot_ly/add_trace dynamic (Plotly) plots, allowing custom styling lines (e.g., alpha, size, marker, etc.).","code":""},{"path":"/reference/line_chart.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A function for producing either static (ggplot) or dynamic (plotly) line charts. — line_chart","text":"plotly ggplot2 object representing line chart.","code":""},{"path":"/reference/line_chart.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A function for producing either static (ggplot) or dynamic (plotly) line charts. — line_chart","text":"","code":"library(dplyr) #>  #> Attaching package: 'dplyr' #> The following objects are masked from 'package:stats': #>  #>     filter, lag #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union library(epiviz)  # Import df lab_data from epiviz and do some manipulation before passing for the test test_df <- epiviz::lab_data  # Manipulating date within df test_df$specimen_date <- as.Date(test_df$specimen_date)  # Setting start date and end date for aggregation start_date <- as.Date(\"2023-01-01\") end_date <- as.Date(\"2023-12-31\")  # Summarization summarised_df <- test_df |>   group_by(organism_species_name, specimen_date) |>   summarize(count = n(), .groups = 'drop') |>   ungroup() |>   filter(specimen_date >= start_date & specimen_date <= end_date)  # Ensure that summarised_df is a data frame summarised_df <- as.data.frame(summarised_df)   # Create params list  params <- list(    df = summarised_df,  # Ensure this is correctly referencing the data frame    x = \"specimen_date\", # Ensure this matches the column name exactly    y = \"count\",         # Ensure this matches the column name exactly    group_var = \"organism_species_name\",  # Ensure this matches the column name exactly    line_colour = c(\"blue\",\"green\",\"orange\"),    line_type = c(\"solid\", \"dotted\", \"dashed\")  )  # Generate the line chart line_chart(params = params, dynamic = FALSE) #> Error in line_chart(params = params, dynamic = FALSE): A data frame argument is required  # Generate the line chart result <- epiviz::line_chart(params = params, dynamic = FALSE) #> Error in epiviz::line_chart(params = params, dynamic = FALSE): A data frame argument is required   # Import df lab_data from epiviz and do some manipulation before passing for the test  test_df <- epiviz::lab_data   # Manipulating date within df  test_df$specimen_date <- as.Date(test_df$specimen_date)   # Setting start date and end date for aggregation  start_date <- as.Date(\"2023-01-01\")  end_date <- as.Date(\"2023-12-31\")   # Summarization  summarised_df <- test_df |>    group_by(organism_species_name, specimen_date) |>    summarize(count = n(), .groups = 'drop') |>    ungroup() |>    filter(specimen_date >= start_date & specimen_date <= end_date)   # Ensure that summarised_df is a data frame  summarised_df <- as.data.frame(summarised_df)   # Create params list  params <- list(    df = summarised_df,  # Ensure this is correctly referencing the data frame    x = \"specimen_date\", # Ensure this matches the column name exactly    y = \"count\",         # Ensure this matches the column name exactly    group_var = \"organism_species_name\",  # Ensure this matches the column name exactly    line_colour = c(\"blue\",\"green\",\"orange\"),    line_type = c(\"solid\", \"dotted\", \"dashed\")  )   # Generate the line chart  epiviz::line_chart(params = params, dynamic = TRUE) #> Error in epiviz::line_chart(params = params, dynamic = TRUE): A data frame argument is required"},{"path":"/reference/llm_interpret.html","id":null,"dir":"Reference","previous_headings":"","what":"Interpret Epidemiological Data or Visualisations using LLMs — llm_interpret","title":"Interpret Epidemiological Data or Visualisations using LLMs — llm_interpret","text":"function interprets given data frame ggplot visualisation sending language model API via elmer package. supports multiple LLM providers, allowing users specify desired provider model environment variables.","code":""},{"path":"/reference/llm_interpret.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Interpret Epidemiological Data or Visualisations using LLMs — llm_interpret","text":"","code":"llm_interpret(input, word_limit = 100, prompt_extension = NULL)"},{"path":"/reference/llm_interpret.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Interpret Epidemiological Data or Visualisations using LLMs — llm_interpret","text":"input input object, either data frame ggplot object, representing data visualisation interpreted. word_limit Integer. desired word length response. Defaults 100. prompt_extension Character. Optional additional instructions extend standard prompt. Defaults NULL.","code":""},{"path":"/reference/llm_interpret.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Interpret Epidemiological Data or Visualisations using LLMs — llm_interpret","text":"character string containing narrative interpretation input object generated LLM.","code":""},{"path":"/reference/llm_interpret.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Interpret Epidemiological Data or Visualisations using LLMs — llm_interpret","text":"Supported LLM Providers Models: OpenAI: Utilizes OpenAI's models via chat_openai(). Requires setting OPENAI_API_KEY environment variable. Applicable models include: \"gpt-4o\" \"gpt-4o-mini\" \"o1-mini\" Google Gemini: Utilizes Google's Gemini models via chat_gemini(). Requires setting GOOGLE_API_KEY environment variable. Applicable models include: \"gemini-1.5-flash\" Anthropic Claude: Utilizes Anthropic's Claude models via chat_claude(). Requires setting CLAUDE_API_KEY environment variable. Applicable models include: \"claude-1\" Environment Variables: LLM_PROVIDER: Specifies LLM provider (\"openai\", \"gemini\", \"claude\"). LLM_API_KEY: API key corresponding chosen provider. LLM_MODEL: model identifier use. Note: Ensure appropriate environment variables set invoking function. function throw error specified provider unsupported required environment variables missing.","code":""},{"path":"/reference/London_LA_boundaries_2023.html","id":null,"dir":"Reference","previous_headings":"","what":"Local Authority Districts (May 2023) Boundaries for London BGC — London_LA_boundaries_2023","title":"Local Authority Districts (May 2023) Boundaries for London BGC — London_LA_boundaries_2023","text":"data contains digital vector boundaries Local Authority Districts, London, United Kingdom, May 2023. boundaries generalised (20m) - clipped coastline (Mean High Water mark). Contains Ordnance Survey ONS Intellectual Property Rights.","code":""},{"path":"/reference/London_LA_boundaries_2023.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Local Authority Districts (May 2023) Boundaries for London BGC — London_LA_boundaries_2023","text":"","code":"London_LA_boundaries_2023"},{"path":"/reference/London_LA_boundaries_2023.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Local Authority Districts (May 2023) Boundaries for London BGC — London_LA_boundaries_2023","text":"dataset variables: FID  LAD23CD Local Authority District code 2023 LAD23NM Local Authority District name 2023 LAD23NMW Local Authority District name 2023 - Welsh BNG_E  BNG_N  LONG  LAT  GlobalID  SHAPE_Length  SHAPE_Area  geometry","code":""},{"path":"/reference/London_LA_boundaries_2023.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Local Authority Districts (May 2023) Boundaries for London BGC — London_LA_boundaries_2023","text":"Source: Office National Statistics licensed Open Government Licence v.3.0 Contains OS data © Crown copyright database right 2023 Data subset following, including Local Authority Districts Inner London Outer London. https://geoportal.statistics.gov.uk/datasets/ons::local-authority-districts-may-2023-boundaries-uk-bgc/explore","code":""},{"path":"/reference/nulldefault.html","id":null,"dir":"Reference","previous_headings":"","what":"Null default operator — nulldefault","title":"Null default operator — nulldefault","text":"Returns first argument NULL, otherwise returns second argument","code":""},{"path":"/reference/nulldefault.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Null default operator — nulldefault","text":"","code":"x %||% y"},{"path":"/reference/nulldefault.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Null default operator — nulldefault","text":"x First value y Second value (default)","code":""},{"path":"/reference/nulldefault.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Null default operator — nulldefault","text":"Returns x NULL, otherwise returns y","code":""},{"path":"/reference/nulldefault.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Null default operator — nulldefault","text":"Null default operator","code":""},{"path":"/reference/nulldefault.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Null default operator — nulldefault","text":"","code":"if (FALSE) { NULL %||% 1  # returns 1 2 %||% 1     # returns 2 }"},{"path":"/reference/palette_gen.html","id":null,"dir":"Reference","previous_headings":"","what":"A function to generate a colour palette of n_pal hexcodes based upon an input colour (or colours) x — palette_gen","title":"A function to generate a colour palette of n_pal hexcodes based upon an input colour (or colours) x — palette_gen","text":"function generate colour palette n_pal hexcodes based upon input colour (colours) x","code":""},{"path":"/reference/palette_gen.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A function to generate a colour palette of n_pal hexcodes based upon an input colour (or colours) x — palette_gen","text":"","code":"palette_gen(x, n_pal)"},{"path":"/reference/palette_gen.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A function to generate a colour palette of n_pal hexcodes based upon an input colour (or colours) x — palette_gen","text":"x Either character name RColorBrewer palette (e.g. fill_palette = \"YlOrRd\"), character containing single rgb colour code, hexcode, colour name used generate colour range (e.g. fill_palette = \"#007C91\"), character vector containing multiple rgb codes, hexcodes, colour names used generate colour range (e.g. c(\"#007C91\",\"purple\", \"red\")). Defaults RColorBrewer \"Blues\" palette. n_pal numeric number desired colours returned palette.","code":""},{"path":"/reference/palette_gen.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A function to generate a colour palette of n_pal hexcodes based upon an input colour (or colours) x — palette_gen","text":"character vector hex codes use colour palette.","code":""},{"path":"/reference/palette_gen.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A function to generate a colour palette of n_pal hexcodes based upon an input colour (or colours) x — palette_gen","text":"","code":"if (FALSE) { palette_gen(c(\"#007C91\",\"purple\"),7)  palette_gen(\"#007C91\",5)  palette_gen(\"YlOrRd\",5) }"},{"path":"/reference/param_assign.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to assign list elements to variables within the parent environment. Compares input list against a reference vector of expected list elements, and assigns any that it cannot find a value of 'NULL'. — param_assign","title":"Function to assign list elements to variables within the parent environment. Compares input list against a reference vector of expected list elements, and assigns any that it cannot find a value of 'NULL'. — param_assign","text":"Function assign list elements variables within parent environment. Compares input list reference vector expected list elements, assigns find value 'NULL'.","code":""},{"path":"/reference/param_assign.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to assign list elements to variables within the parent environment. Compares input list against a reference vector of expected list elements, and assigns any that it cannot find a value of 'NULL'. — param_assign","text":"","code":"param_assign(params, reference)"},{"path":"/reference/param_assign.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to assign list elements to variables within the parent environment. Compares input list against a reference vector of expected list elements, and assigns any that it cannot find a value of 'NULL'. — param_assign","text":"params List input parameters. reference Character vector expected parameters.","code":""},{"path":"/reference/param_assign.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to assign list elements to variables within the parent environment. Compares input list against a reference vector of expected list elements, and assigns any that it cannot find a value of 'NULL'. — param_assign","text":"Assigns parameter values parent environment","code":""},{"path":"/reference/param_assign.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Function to assign list elements to variables within the parent environment. Compares input list against a reference vector of expected list elements, and assigns any that it cannot find a value of 'NULL'. — param_assign","text":"","code":"if (FALSE) { param_assign(params, c(\"df\",\"x\",\"y\",\"legend\",\"title\")) }"},{"path":"/reference/param_rename.html","id":null,"dir":"Reference","previous_headings":"","what":"A function to rename an item in a named list — param_rename","title":"A function to rename an item in a named list — param_rename","text":"function rename item named list","code":""},{"path":"/reference/param_rename.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A function to rename an item in a named list — param_rename","text":"","code":"param_rename(params_list, current_name, new_name)"},{"path":"/reference/param_rename.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A function to rename an item in a named list — param_rename","text":"params_list named list current_name name list item modified new_name new name list item","code":""},{"path":"/reference/param_rename.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A function to rename an item in a named list — param_rename","text":"list item renamed","code":""},{"path":"/reference/param_rename.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A function to rename an item in a named list — param_rename","text":"","code":"if (FALSE) { params <- param_rename(params,\"chart_footer_colour\",\"new_name\") }"},{"path":"/reference/PHEC_boundaries_2016.html","id":null,"dir":"Reference","previous_headings":"","what":"PHEC (Dec 2016) Generalised Clipped Boundaries in England — PHEC_boundaries_2016","title":"PHEC (Dec 2016) Generalised Clipped Boundaries in England — PHEC_boundaries_2016","text":"data contains digital vector boundaries Public Health England Centres England December 2016. boundaries generalised (20m) - clipped coastline (Mean High Water mark). Contains Ordnance Survey ONS Intellectual Property Rights.","code":""},{"path":"/reference/PHEC_boundaries_2016.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"PHEC (Dec 2016) Generalised Clipped Boundaries in England — PHEC_boundaries_2016","text":"","code":"PHEC_boundaries_2016"},{"path":"/reference/PHEC_boundaries_2016.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"PHEC (Dec 2016) Generalised Clipped Boundaries in England — PHEC_boundaries_2016","text":"dataset variables: OBJECTID  phec16cd Public Health England Centre code phec16nm Public Health England Centre name bng_e  bng_n  long  lat  GlobalID  SHAPE_Length  SHAPE_Area  geometry","code":""},{"path":"/reference/PHEC_boundaries_2016.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"PHEC (Dec 2016) Generalised Clipped Boundaries in England — PHEC_boundaries_2016","text":"Source: Office National Statistics licensed Open Government Licence v.3.0 Contains OS data © Crown copyright database right 2022 https://open-geography-portalx-ons.hub.arcgis.com/datasets/ons::phec-dec-2016-generalised-clipped-boundaries--england/explore","code":""},{"path":"/reference/plotly_legend_pos.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to convert ggplot legend positions into list of parameters for plotly layout — plotly_legend_pos","title":"Function to convert ggplot legend positions into list of parameters for plotly layout — plotly_legend_pos","text":"Function convert ggplot legend positions list parameters plotly layout","code":""},{"path":"/reference/plotly_legend_pos.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to convert ggplot legend positions into list of parameters for plotly layout — plotly_legend_pos","text":"","code":"plotly_legend_pos(x)"},{"path":"/reference/plotly_legend_pos.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to convert ggplot legend positions into list of parameters for plotly layout — plotly_legend_pos","text":"x ggplot legend position (\"top\",\"bootom\",\"right\",\"left\")","code":""},{"path":"/reference/plotly_legend_pos.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to convert ggplot legend positions into list of parameters for plotly layout — plotly_legend_pos","text":"list parameters plotly layout.legend","code":""},{"path":"/reference/plotly_legend_pos.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Function to convert ggplot legend positions into list of parameters for plotly layout — plotly_legend_pos","text":"","code":"if (FALSE) { plotly_legend_pos(\"right\") }"},{"path":"/reference/plotly_line_style.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to translate ggplot linetypes into plotly linetypes — plotly_line_style","title":"Function to translate ggplot linetypes into plotly linetypes — plotly_line_style","text":"Function translate ggplot linetypes plotly linetypes","code":""},{"path":"/reference/plotly_line_style.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to translate ggplot linetypes into plotly linetypes — plotly_line_style","text":"","code":"plotly_line_style(x)"},{"path":"/reference/plotly_line_style.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to translate ggplot linetypes into plotly linetypes — plotly_line_style","text":"x text string ggplot line type (\"solid\", \"dotted\", \"dashed\", \"longdash\", \"dotdash\")","code":""},{"path":"/reference/plotly_line_style.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to translate ggplot linetypes into plotly linetypes — plotly_line_style","text":"text string plotly line type","code":""},{"path":"/reference/plotly_line_style.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Function to translate ggplot linetypes into plotly linetypes — plotly_line_style","text":"","code":"if (FALSE) { plotly_line_style(\"dotdash\") }"},{"path":"/reference/point_chart.html","id":null,"dir":"Reference","previous_headings":"","what":"point_chart — point_chart","title":"point_chart — point_chart","text":"function producing either static (ggplot) dynamic (plotly) point charts.","code":""},{"path":"/reference/point_chart.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"point_chart — point_chart","text":"","code":"point_chart(   dynamic = FALSE,   base = NULL,   params = list(df = NULL, x = NULL, y = NULL, point_shape = \"triangle\", point_size =     1.5, point_colours = \"blue\", point_labels = NULL, point_labels_size = 5,     point_labels_hjust = 0, point_labels_vjust = 0, point_labels_nudge_x = 0,     point_labels_nudge_y = 0, group_var = NULL, ci = NULL, ci_upper = NULL, ci_lower =     NULL, ci_legend = TRUE, ci_legend_title = \"Confidence interval\", ci_colours = \"red\",     errorbar_width = NULL, y_sec_axis = FALSE, y_sec_axis_no_shift = TRUE,     y_sec_axis_percent_full = FALSE, chart_title = NULL,       chart_title_size = 13,     chart_title_colour = \"black\", chart_footer = NULL, chart_footer_size = 12,     chart_footer_colour = \"black\", x_axis_title = NULL, y_axis_title = NULL,     x_axis_label_angle = NULL, y_axis_label_angle = NULL, x_axis_reverse = FALSE,     y_percent = FALSE, x_limit_min = NULL, x_limit_max = NULL, y_limit_min = NULL,     y_limit_max = NULL, x_axis_break_labels = NULL, y_axis_break_labels = NULL,     x_axis_n_breaks = NULL, y_axis_n_breaks = NULL, x_axis_date_breaks = NULL, st_theme =     NULL, show_gridlines = TRUE,       show_axislines = TRUE, legend_title = \"\",     legend_pos = \"right\", point_size_legend = FALSE, point_size_legend_title = \"\", hline     = NULL, hline_colour = \"black\", hline_width = 0.5, hline_type = \"dashed\", hline_label     = NULL, hline_label_colour = \"black\"),   ... )"},{"path":"/reference/point_chart.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"point_chart — point_chart","text":"dynamic Logical indicating whether produce dynamic (plotly) output. Default FALSE, return static ggplot output. base base ggplot plotly object output applied . dynamic = TRUE base must plotly object, dynamic = FALSE base must ggplot object. params named list containing arguments used create plot. df data frame containing values used create point chart. x Name variable df used populate x-axis. y Name variable df used populate y-axis. point_shape Shape plotted points. Permitted values c('circle',   'triangle','square','plus','square cross','asterisk','diamond'). group_var provided, point shapes automatically assigned based group. point_size Size plotted point symbols. supplied number, points plotted size. supplied name numeric variable within df, size point relative value numeric variable manner bubble chart. point_colours Colour points plotted (default = \"blue\"). group_var provided, point_colours can set character vector define colours group. point_labels Name variable df containing text labels plot point chart. provided labels applied. dynamic   = TRUE point_labels applied hover-labels, point_labels accept html format output labels. point_labels_size Font size point_labels output chart dynamic = FALSE. point_labels_hjust Horizontal justification point_labels output chart dynamic = FALSE. Permitted values = c(0, 0.5, 1) left, centre, right justified respectively. point_labels_vjust Vertical justification point_labels output chart dynamic = FALSE. Permitted values = c(0, 0.5, 1) bottom, middle, top justified respectively. point_labels_nudge_x Horizontal adjustment nudge point_labels dynamic = FALSE. Useful offsetting text points. point_labels_nudge_y Vertical adjustment nudge point_labels dynamic = FALSE. Useful offsetting text points. group_var Name variable df used define separate groups points chart. ci Confidence interval. ci = \"errorbar\" confidence intervals plotted point errorbars, ci = \"ribbon\" confidence intervals added chart ribbon plot group. ci provided, ci_upper ci_lower must also provided. ci_upper Name variable df used upper confidence limit point. Mandatory ci provided. ci_lower Name variable df used lower confidence limit point. Mandatory ci provided. ci_legend Logical indicating whether separate legend included chart confidence interval parameters. applies group_var provided. Defaults FALSE. ci_legend_title Text use title separate legend ci_legend = TRUE. ci_colours Colour(s) used plotting confidence intervals. ci =   \"errorbar\" determine colour plotted errorbars, ci =   \"ribbon\" determine colour plotted ribbons. errorbar_width Horizontal width plotted error bars ci =   \"errorbar\". y_sec_axis Logical indicate whether data plotted secondary (right) y-axis. Default = FALSE. y_sec_axis_no_shift Forces secondary y-axis scale begin 0. Default = TRUE. y_sec_axis_percent_full Forces secondary y-axis scale range 0-100% y_percent = TRUE chart_title Text use chart title. chart_title_size Font size chart title. chart_title_colour Font colour chart title. chart_footer Text use chart footer. chart_footer_size Font size chart footer. chart_footer_colour Font colour chart footer. x_axis_title Text used x-axis title. Defaults name x-variable stated. y_axis_title Text used y-axis title. Defaults name y-variable stated. x_axis_label_angle Angle x-axis label text. y_axis_label_angle Angle y-axis label text. x_axis_reverse Reverses x-axis scale x_axis_reverse = TRUE. y_percent Converts y-axis percentage scale y_percent = TRUE. x_limit_min Lower limit x-axis. Default used provided. x_limit_max Upper limit x-axis. Default used provided. y_limit_min Lower limit y-axis. Default used provided. y_limit_max Upper limit y-axis. Default used provided. x_axis_break_labels Vector values use x-axis breaks. Defaults used provided. y_axis_break_labels Vector values use y-axis breaks. Defaults used provided. x_axis_n_breaks Scales x-axis approximately n breaks. provided x_axis_break_labels provided. y_axis_n_breaks Scales y-axis approximately n breaks. used y_axis_break_labels also provided. x_axis_date_breaks string giving distance breaks like \"2 weeks\", \"10 years\". Valid specifications 'sec', 'min', 'hour', 'day', 'week', 'month' 'year', optionally followed 's'. Matches ggplot scale_date() conventions (see https://ggplot2.tidyverse.org/reference/scale_date.html). used y_axis_break_labels also provided. st_theme Name ggplot theme applied static plot. Can provided dynamic = FALSE show_gridlines Logical show chart gridlines. Default = TRUE. show_axislines Logical show chart axis lines. Default = TRUE. legend_title Text used legend title. legend_pos Position legend. Permitted values = c(\"top\",\"bootom\",\"right\",\"left\") point_size_legend Include legend point_size. Default = FALSE point_size_legend_title Text used point legend title. hline Adds horizontal line across chart corresponding y-value. Multiple values may provided vector add multiple horizontal lines. hline_colour Colour horizontal lines hline provided. vector colours can provided colour individual hlines multiple hlines provided. hline_width Numerical width horizontal lines hline provided. vector numerical widths can provided individual hlines multiple hlines provided. hline_type Line style horizontal lines hline provided. vector line styles can provided style hlines multiple hlines provided. Permitted values = c(\"solid\", \"dotted\", \"dashed\", \"longdash\", \"dotdash\"). hline_label Text label horizontal lines hline provided. vector text strings can provided label individual hlines multiple hlines provided. hline_label_colour Colour horizontal line labels hline_labels provided. vector colours can provided colour individual hline_labels multiple hline_labels provided. ... Additional arguments passed geom_point static (ggplot2) plots add_trace dynamic (Plotly) plots, allowing custom styling points (e.g., alpha, stroke, marker, etc.).","code":""},{"path":"/reference/point_chart.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"point_chart — point_chart","text":"ggplot plotly object.","code":""},{"path":"/reference/point_chart.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"point_chart — point_chart","text":"","code":"if (FALSE) {  # Example 1: Basic point chart.  # Define a dataframe containing the number of detections per month from the # epiviz::lab_data dataset. library(epiviz)  detections_per_month <- epiviz::lab_data |>   group_by(specimen_month = lubridate::floor_date(specimen_date, 'month')) |>   summarise(detections = n()) |>   ungroup()  # Create static point chart of detections per month from 2022 to 2023. chart_detections_per_month <- point_chart(   params = list(     df = detections_per_month,     x = \"specimen_month\",     y = \"detections\",     point_colours = \"#007C91\",     point_size = 3,     x_limit_min = \"2022-01-01\",     x_limit_max = \"2023-12-31\",     chart_title = \"Detections per Month 2022-2023\",     x_axis_title = \"Month of detection\",     y_axis_title = \"Number of detections\",     x_axis_date_breaks = \"2 months\"   ) )  chart_detections_per_month  # Example 2: Point chart with error bars and threshold line. library(epiviz)  # Add random error limits to detections_per_month dataframe detections_per_month <- detections_per_month |>   rowwise() |>   mutate(lower_limit = detections - sample(10:50,1),          upper_limit = detections + sample(10:50,1)) |>   ungroup()  # Define parameters list outside of point_chart() function. detections_params <- list(   df = detections_per_month,   x = \"specimen_month\",   y = \"detections\",   point_colours = \"#007C91\",   point_size = 3,   x_limit_min = \"2022-01-01\",   x_limit_max = \"2023-12-31\",   chart_title = \"Detections per Month 2022-2023\",   x_axis_title = \"Month of detection\",   y_axis_title = \"Number of detections\",   x_axis_date_breaks = \"2 months\",   y_axis_break_labels = seq(0, 900, 100),   ci = \"errorbar\",   ci_lower = \"lower_limit\",   ci_upper = \"upper_limit\",   error_colours = \"red\",   hline = 800,   hline_colour = \"orange\",   hline_label = \"threshold\",   hline_label_colour = \"orange\" )  # Create static point chart static_chart <- point_chart(params = detections_params, dynamic = FALSE)  # Create the same chart as a dynamic chart dynamic_chart <- point_chart(params = detections_params, dynamic = TRUE)  # View both simultaneously using shiny app library(shiny) library(plotly) ui <- fluidPage(   plotOutput('static_chart'),   plotlyOutput('dynamic_chart') ) server <- function(input, output, session) {   output$static_chart <- renderPlot(static_chart)   output$dynamic_chart <- renderPlotly(dynamic_chart) } shinyApp(ui, server)  # Example 3: Point chart with grouped data and confidence ribbon. library(epiviz)  # Define a dataframe containing the number of detections per month by species # from the epiviz::lab_data dataset, and add random error limits. species_by_month <- lab_data |>   group_by(specimen_month = lubridate::floor_date(specimen_date, 'month'),            organism_species_name) |>   summarise(detections = n()) |>   ungroup() |>   rowwise() |>   mutate(lower_limit = detections - sample(10:50,1),          upper_limit = detections + sample(10:50,1)) |>   ungroup()  # Define parameters list for point_chart() function. #   -Include multiple threshold lines species_params <- list(   df = species_by_month,   x = \"specimen_month\",   y = \"detections\",   group_var = \"organism_species_name\",   point_colours = c(\"#007C91\",\"#8A1B61\",\"#FF7F32\"),   point_size = 3,   x_limit_min = \"2022-01-01\",   x_limit_max = \"2023-12-31\",   chart_title = \"Detections per Month 2022-2023\",   x_axis_title = \"Month of detection\",   y_axis_title = \"Number of detections\",   x_axis_date_breaks = \"2 months\",   y_axis_break_labels = seq(0, 600, 100),   x_axis_label_angle = 45,   ci = \"ribbon\",   ci_lower = \"lower_limit\",   ci_upper = \"upper_limit\",   ci_colours = c(\"#007C91\",\"#8A1B61\",\"#FF7F32\"),   hline = c(450,550),   hline_colour = c(\"blue\",\"red\"),   hline_label = c(\"threshold 1\", \"threshold 2\"),   hline_label_colour = c(\"blue\",\"red\") )  # Create static and dynamic charts static_chart <- point_chart(params = species_params, dynamic = FALSE) dynamic_chart <- point_chart(params = species_params, dynamic = TRUE)  # View using app library(shiny) library(plotly) ui <- fluidPage(   plotOutput('static_chart'),   plotlyOutput('dynamic_chart') ) server <- function(input, output, session) {   output$static_chart <- renderPlot(static_chart)   output$dynamic_chart <- renderPlotly(dynamic_chart) } shinyApp(ui, server)  # Example 4: Point chart as bubble chart library(epiviz)  # Create dataframe of number of detections of each species by region london_detections <- epiviz::lab_data |>   mutate(london_det = ifelse(region == \"London\", 1, 0)) |>   group_by(specimen_month = lubridate::floor_date(specimen_date, 'month')) |>   summarise(detections = n(),             detections_london = sum(london_det)) |>   ungroup() |>   mutate(proportion_london = detections_london/detections,          percent_london = percent(proportion_london, accuracy = 1),          hoverlabels = paste0(            '<b>',specimen_month,'<\/b>',            '<br>Detections: ',detections,            '<br>In London: ',detections_london,            '<br><i>% in London: ',percent_london,'<\/i>'          ))  # Define parameters list for point_chart() function. species_region_params <- list(   df = london_detections,   x = \"specimen_month\",   y = \"detections\",   point_size = \"detections_london\",   point_size_legend = TRUE,   point_size_legend_title = \"Number of \\ndetections in \\nLondon\",   point_shape = \"circle\",   point_colours = \"#8A1B61\",   chart_title = \"Detections by month \\n(with percentage in London)\",   x_axis_title = \"Detection Month\",   y_axis_title = \"Number of Detections\",   x_axis_label_angle = 45,   y_axis_break_labels = seq(300, 900, 100),   x_axis_date_breaks = \"6 months\" )  # Add point label parameters for static chart stat_label_parameters <- list(point_labels = \"percent_london\",                               point_labels_size = 2.5,                               point_labels_vjust = 1,                               point_labels_hjust = 0.5,                               point_labels_nudge_x = 5,                               point_labels_nudge_y = -15)  # Add hover label parameters for dynamic chart dyn_label_parameters <- list(point_labels = \"hoverlabels\")  # Create static and dynamic charts static_chart <- point_chart(params = c(species_region_params,stat_label_parameters),                             dynamic = FALSE)  dynamic_chart <- point_chart(params = c(species_region_params,dyn_label_parameters),                              dynamic = TRUE)  # View using app library(shiny) library(plotly) ui <- fluidPage(   plotOutput('static_chart'),   plotlyOutput('dynamic_chart') ) server <- function(input, output, session) {   output$static_chart <- renderPlot(static_chart)   output$dynamic_chart <- renderPlotly(dynamic_chart) } shinyApp(ui, server)  # Example 5: Point chart with additional overlayed chart on secondary y-axis library(epiviz)  # Use static chart from Example 1 as a base chart base_chart <- chart_detections_per_month  # Define data for overlaying chart # Percentage of overall detections in people over 65 years of age. library(lubridate) detections_over65 <- lab_data |>   mutate(age = year(as.period(lubridate::interval(date_of_birth,Sys.Date()))),          over65 = ifelse(age > 65, 1, 0)) |>   group_by(specimen_month = lubridate::floor_date(specimen_date, 'month')) |>   summarise(detections = n(),             detections_over65 = sum(over65)) |>   ungroup() |>   mutate(percent_over65 = detections_over65/detections)  # Define parameters list over65_params <- list(   df = detections_over65,   x = \"specimen_month\",   y = \"percent_over65\",   y_percent = TRUE,   y_sec_axis = TRUE,   y_sec_axis_percent_full = TRUE,   point_colours = \"purple\",   point_size = 3,   point_shape = \"asterisk\",   x_limit_min = \"2022-01-01\",   x_limit_max = \"2023-12-31\",   y_limit_max = 1000,   chart_title = \"Detections per Month 2022-2023\",   x_axis_title = \"Month of detection\",   y_axis_title = \"Percentage of detections in over 65s\",   x_axis_date_breaks = \"2 months\" )  # Create point chart over65_chart <- point_chart(base = base_chart,                             params = over65_params,                             dynamic = FALSE)  # Legends are not currently implemented for static charts with a supplied #  base chart, so add legend manually using dummy data and an invisible geom_point() over65_chart <- over65_chart +   geom_point(data = data.frame(x=as.Date(c(\"2020-01-01\",\"2020-01-02\")),                                y=c(1,1),                                label=c(\"Total Detections\",\"% of Detections in Over 65s\")),              aes(x=x, y=y, colour=label, shape=label)) +   scale_color_manual(name='', values=c(\"Total Detections\"=\"#007C91\",                                        \"% of Detections in Over 65s\"=\"purple\")) +   scale_shape_manual(name='', values=c(\"Total Detections\"=\"triangle\",                                        \"% of Detections in Over 65s\"=\"asterisk\")) +   theme(legend.position=\"top\")  over65_chart  }"},{"path":"/reference/process_line_list_for_age_sex_pyramid.html","id":null,"dir":"Reference","previous_headings":"","what":"Process Line List for Age-Sex Pyramid — process_line_list_for_age_sex_pyramid","title":"Process Line List for Age-Sex Pyramid — process_line_list_for_age_sex_pyramid","text":"function processes line list data frame, calculating age either provided age column date birth. filters data include males females, groups data age groups, summarizes counts age group sex.","code":""},{"path":"/reference/process_line_list_for_age_sex_pyramid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Process Line List for Age-Sex Pyramid — process_line_list_for_age_sex_pyramid","text":"","code":"process_line_list_for_age_sex_pyramid(   df,   var_map = list(age = \"age\", date_of_birth = \"date_of_birth\", sex = \"sex\"),   age_breakpoints = c(0, 5, 19, 65, Inf),   age_calc_refdate = Sys.Date() )"},{"path":"/reference/process_line_list_for_age_sex_pyramid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Process Line List for Age-Sex Pyramid — process_line_list_for_age_sex_pyramid","text":"df data frame containing line list data. var_map list mapping variable names data frame expected names used function. list contain elements: age Name column containing age values (default 'age'). date_of_birth Name column containing date birth values (default 'date_of_birth'). sex Name column containing sex values (default 'sex'). Permitted values sex include M, F, Male, Female (case sensitive) age_breakpoints numeric vector specifying breakpoints age groups. default c(0, 5, 19, 65, Inf). age_calc_refdate Date object specifying reference date calculating age date birth. default Sys.Date().","code":""},{"path":"/reference/process_line_list_for_age_sex_pyramid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Process Line List for Age-Sex Pyramid — process_line_list_for_age_sex_pyramid","text":"data frame aggregated age group sex, columns age group, sex, value (count), lower confidence limit, upper confidence limit.","code":""},{"path":"/reference/process_line_list_for_age_sex_pyramid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Process Line List for Age-Sex Pyramid — process_line_list_for_age_sex_pyramid","text":"","code":"if (FALSE) {   df <- epiviz::lab_data   processed_df <- process_line_list_for_age_sex_pyramid(df) }"},{"path":"/reference/scale_function.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to scale/shift secondary y axis labels — scale_function","title":"Function to scale/shift secondary y axis labels — scale_function","text":"Function scale/shift secondary y axis labels","code":""},{"path":"/reference/scale_function.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to scale/shift secondary y axis labels — scale_function","text":"","code":"scale_function(x, scale, shift)"},{"path":"/reference/scale_function.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to scale/shift secondary y axis labels — scale_function","text":"x value scaled/shifted scale value scale axis shift value shift axis ","code":""},{"path":"/reference/scale_function.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to scale/shift secondary y axis labels — scale_function","text":"scaled/shifted y axis values","code":""},{"path":"/reference/scale_function.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Function to scale/shift secondary y axis labels — scale_function","text":"","code":"if (FALSE) { scale_function(2,4,5) }"},{"path":"/reference/set_Arial.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to set chart_font variable to Arial in order to resolve warnings — set_Arial","title":"Function to set chart_font variable to Arial in order to resolve warnings — set_Arial","text":"Function set chart_font variable Arial order resolve warnings","code":""},{"path":"/reference/set_Arial.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to set chart_font variable to Arial in order to resolve warnings — set_Arial","text":"","code":"set_Arial()"},{"path":"/reference/set_Arial.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to set chart_font variable to Arial in order to resolve warnings — set_Arial","text":"chart_font string","code":""},{"path":"/reference/set_Arial.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Function to set chart_font variable to Arial in order to resolve warnings — set_Arial","text":"","code":"if (FALSE) { set_Arial() }"},{"path":"/reference/UK_boundaries_2023.html","id":null,"dir":"Reference","previous_headings":"","what":"Countries (December 2023) Boundaries UK BUC — UK_boundaries_2023","title":"Countries (December 2023) Boundaries UK BUC — UK_boundaries_2023","text":"data contains digital vector boundaries  Countries, United Kingdom, December 2023. boundaries ultra generalised (500m) clipped coastline (Mean High Water mark). Contains Ordnance Survey ONS Intellectual Property Rights.","code":""},{"path":"/reference/UK_boundaries_2023.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Countries (December 2023) Boundaries UK BUC — UK_boundaries_2023","text":"","code":"UK_boundaries_2023"},{"path":"/reference/UK_boundaries_2023.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Countries (December 2023) Boundaries UK BUC — UK_boundaries_2023","text":"dataset variables: FID  CTRY23CD Country code 2023 CTRY23NM Country name 2023 CTRY23NMW Country name 2023 - Welsh BNG_E  BNG_N  LONG  LAT  GlobalID  SHAPE_Length  SHAPE_Area  geometry","code":""},{"path":"/reference/UK_boundaries_2023.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Countries (December 2023) Boundaries UK BUC — UK_boundaries_2023","text":"Source: Office National Statistics licensed Open Government Licence v.3.0 Contains OS data © Crown copyright database right 2023 https://geoportal.statistics.gov.uk/datasets/ons::countries-december-2023-boundaries-uk-buc/explore","code":""},{"path":"/news/index.html","id":"epiviz-0009001","dir":"Changelog","previous_headings":"","what":"epiviz 0.0.0.9001","title":"epiviz 0.0.0.9001","text":"Initial GitHub code transfer internal repo.","code":""}]
