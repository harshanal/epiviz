% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/llm_auto_viz.R
\name{llm_auto_viz}
\alias{llm_auto_viz}
\title{Automated Visualization Generation Using LLM}
\usage{
llm_auto_viz(df, user_prompt = "", execute = TRUE)
}
\arguments{
\item{df}{A data frame to visualise}

\item{user_prompt}{Character string providing optional guidance for visualization selection}

\item{execute}{Logical; whether to execute the generated code (TRUE) or just return it (FALSE)}

\item{dynamic}{Logical; whether to generate an interactive (TRUE) or static (FALSE) visualization}
}
\value{
If execute=TRUE, returns the visualization. If execute=FALSE, returns the R code as a character string.
}
\description{
\ifelse{html}{\href{https://lifecycle.r-lib.org/articles/stages.html#experimental}{\figure{lifecycle-experimental.svg}{options: alt='[Experimental]'}}}{\strong{[Experimental]}}

This function automatically selects and generates R visualization code
based on the provided data frame structure using a Large Language Model.
Only metadata (column names and types) is sent to the LLM, maintaining data privacy.
}
\details{
This function examines the structure of the provided data frame and uses an LLM to generate
appropriate visualization code using epiviz functions. It prioritizes user guidance when provided.
All LLM interactions are logged for auditing purposes.

\strong{Environment Variables:}
\itemize{
\item \code{LLM_PROVIDER}: Specifies the LLM provider ("openai", "gemini", "claude").
\item \code{LLM_API_KEY}: The API key corresponding to the chosen provider.
\item \code{LLM_MODEL}: The model identifier to use.
}
}
\examples{
\dontrun{
# Automatic visualization
viz <- llm_auto_viz(lab_data())

# Specify a visualization type
viz <- llm_auto_viz(lab_data(), user_prompt = "Use a line chart to show weekly trends.")

# Get code without executing it
code <- llm_auto_viz(lab_data(), execute = FALSE)
cat(code)
}

}
