% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/line_chart.R
\name{linechart}
\alias{linechart}
\title{Line Chart Function}
\usage{
linechart(
  dynamic = FALSE,
  base = NULL,
  df,
  x,
  y,
  ci = NULL,
  lower = NULL,
  upper = NULL,
  error_colour = c("#f2c75c"),
  group_var,
  line_colour = c("blue"),
  line_type = "solid",
  width = 1,
  title = NULL,
  x_label = NULL,
  x_label_angle = NULL,
  y_label = NULL,
  y_label_angle = NULL,
  y_percent = FALSE,
  st_theme = NULL,
  add_points = FALSE,
  show_gridlines = FALSE,
  show_axislines = TRUE,
  legend_title = NULL,
  legend_position = NULL,
  hline = NULL,
  hline_colour = "red",
  hline_label = NULL
)
}
\arguments{
\item{dynamic}{Logical indicating whether to produce a dynamic (plotly) plot. Default is \code{FALSE}.}

\item{base}{Optional base plot to customize. Default is NULL.}

\item{df}{Data frame containing the data.}

\item{x}{Variable for the x-axis.}

\item{y}{Variable for the y-axis.}

\item{ci}{Type of confidence interval. Can be 'e' (error bar) or 'r' (ribbon). Default is NULL.}

\item{lower}{Lower bound for confidence interval. Default is NULL.}

\item{upper}{Upper bound for confidence interval. Default is NULL.}

\item{error_colour}{Color for error bars or ribbons. Default is "#f2c75c".}

\item{group_var}{Variable for grouping data points. Default is NULL.}

\item{line_colour}{Vector of colors for lines. Default is "blue".}

\item{line_type}{Type of line. Options: "solid", "dotted", "dashed", "longdash", "dotdash". Default is "solid".}

\item{width}{Width of lines. Default is 1.}

\item{title}{Title of the plot. Default is NULL.}

\item{x_label}{Label for the x-axis. Default is NULL.}

\item{x_label_angle}{Angle for x-axis label rotation (counterclockwise). Default is NULL.}

\item{y_label}{Label for the y-axis. Default is NULL.}

\item{y_label_angle}{Angle for y-axis label rotation (counterclockwise). Default is NULL.}

\item{y_percent}{Logical indicating whether to display y-axis labels as percentages. Default is FALSE.}

\item{st_theme}{Optional theme for ggplot plots. Default is NULL.}

\item{add_points}{Logical indicating whether to add points to lines. Default is FALSE.}

\item{show_gridlines}{Logical indicating whether to show gridlines. Default is FALSE.}

\item{show_axislines}{Logical indicating whether to show axis lines. Default is TRUE.}

\item{legend_title}{Title for the legend. Default is NULL.}

\item{legend_position}{Position of the legend. Options: "left", "top", "right", "bottom", "none". Default is NULL.}

\item{hline}{Horizontal line at specified y-value. Default is NULL.}

\item{hline_colour}{Color of the horizontal line. Default is "red".}

\item{hline_label}{Label for the horizontal line. Default is NULL.}
}
\value{
A static (ggplot) or dynamic (plotly) line chart.

Returns a line chart
}
\description{
Produce either a static (ggplot) or a dynamic (plotly) line chart output depending on the parameter \code{dynamic}.
}
\examples{
library(dplyr)
library(epiviz)

# Import df lab_data from epiviz and do some manipulation before passing for the test
test_df <- epiviz::lab_data

# Manipulating date within df
test_df$specimen_date <- as.Date(test_df$specimen_date)

# Setting start date and end date for aggregation
start_date <- as.Date("2023-01-01")
end_date <- as.Date("2023-12-31")

# Summarization
summarised_df <- test_df |>
  group_by(organism_species_name, specimen_date) |>
  summarize(count = n(), .groups = 'drop') |>
  ungroup() |>
  filter(specimen_date >= start_date & specimen_date <= end_date)

# Ensure that summarised_df is a data frame
summarised_df <- as.data.frame(summarised_df)

# Create params list
params <- list(
  dfr = summarised_df,  # Ensure this is correctly referencing the data frame
  x = "specimen_date", # Ensure this matches the column name exactly
  y = "count",         # Ensure this matches the column name exactly
  group_var = "organism_species_name",  # Ensure this matches the column name exactly
  line_colour = c("blue","green","orange")
)

# Generate the line chart
result <- epiviz::line_chart(params = params, dynamic = TRUE)

}
