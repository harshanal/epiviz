% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/line_chart.R
\name{line_chart}
\alias{line_chart}
\title{A function for producing either static (ggplot) or dynamic (plotly)
line charts.}
\usage{
line_chart(
  dynamic = FALSE,
  base = NULL,
  params = list(dfr, x, y, ci = NULL, lower = NULL, upper = NULL, error_colour =
    c("#f2c75c"), group_var, line_colour = c("blue"), line_type = "solid", width = 1,
    title = NULL, x_label = NULL, x_label_angle = NULL, y_label = NULL, y_label_angle =
    NULL, y_percent = FALSE, st_theme = NULL, add_points = FALSE, show_gridlines = FALSE,
    show_axislines = TRUE, legend_title = NULL, legend_position = NULL, hline = NULL,
    hline_colour = "red", hline_label = NULL)
)
}
\arguments{
\item{dynamic}{A logical value. If \code{TRUE}, the line chart will be rendered as a Plotly object for interactivity.
If \code{FALSE}, a static ggplot2 object will be returned.}

\item{base}{A base plotly or ggplot2 object to add the line chart to. Default is \code{NULL}.}

\item{params}{A list containing the following elements:
\itemize{
\item \code{dfr} A data frame containing the data to be plotted.
\item \code{x} A character string specifying the name of the column in \code{dfr} to be used for the x-axis.
\item \code{y} A character string specifying the name of the column in \code{dfr} to be used for the y-axis.
\item \code{group_var} A character string specifying the name of the column in \code{dfr} to be used for grouping the data.
\item \code{ci} Optional. A character string specifying the column in \code{dfr} for confidence intervals.
\item \code{lower} Optional. A character string specifying the column in \code{dfr} for lower bounds of confidence intervals.
\item \code{upper} Optional. A character string specifying the column in \code{dfr} for upper bounds of confidence intervals.
\item \code{error_colour} The color for error bars. Default is \verb{#f2c75c}.
\item \code{line_colour} List of colours for lines. Default is \code{blue}.
\item \code{line_type} Line type for single graph, or list of line types
Permissable values: "solid", "dotted", "dashed", "longdash", "dotdash"
\item \code{width} A numeric value specifying the width of the lines.
\item \code{title} Optional. A character string specifying the title of the plot.
\item \code{x_label} Optional. A character string specifying the label for the x-axis.
\item \code{x_label_angle} Optional. A numeric value specifying the rotation angle for the x-axis labels.
\item \code{y_label} Optional. A character string specifying the label for the y-axis.
\item \code{y_label_angle} Optional. A numeric value specifying the rotation angle for the y-axis labels.
\item \code{y_percent} Optional. A logical value. If \code{TRUE}, the y-axis will be scaled to percentages.
\item \code{st_theme} Optional. A ggplot2 theme object to customize the style of the plot.
\item \code{add_points} Optional. A logical value. If \code{TRUE}, points will be added to the line chart.
}}
}
\value{
A plotly or ggplot2 object representing the line chart.
}
\description{
This function generates a line chart from a data frame using specified x and y variables.
Optionally, the plot can be rendered as an interactive Plotly object. The function also allows
grouping of data based on a specified grouping variable.
}
\examples{
library(dplyr)
library(epiviz)

# Import df lab_data from epiviz and do some manipulation before passing for the test
test_df <- epiviz::lab_data

# Manipulating date within df
test_df$specimen_date <- as.Date(test_df$specimen_date)

# Setting start date and end date for aggregation
start_date <- as.Date("2023-01-01")
end_date <- as.Date("2023-12-31")

# Summarization
summarised_df <- test_df |>
  group_by(organism_species_name, specimen_date) |>
  summarize(count = n(), .groups = 'drop') |>
  ungroup() |>
  filter(specimen_date >= start_date & specimen_date <= end_date)

# Ensure that summarised_df is a data frame
summarised_df <- as.data.frame(summarised_df)

<<<<<<< HEAD
 # Create params list
 params <- list(
   dfr = summarised_df,  # Ensure this is correctly referencing the data frame
   x = "specimen_date", # Ensure this matches the column name exactly
   y = "count",         # Ensure this matches the column name exactly
   group_var = "organism_species_name",  # Ensure this matches the column name exactly
   line_colour = c("blue","green","orange"),
   line_type = c("solid", "dotted", "dashed")
 )
 # Generate the line chart
 epiviz::line_chart(params = params, dynamic = FALSE)
=======
# Create params list
params <- list(
  dfr = summarised_df,  # Ensure this is correctly referencing the data frame
  x = "specimen_date", # Ensure this matches the column name exactly
  y = "count",         # Ensure this matches the column name exactly
  group_var = "organism_species_name",  # Ensure this matches the column name exactly
  line_colour = c("blue","green","orange"),
  line_type = c("solid", "dotted", "dashed")
)
>>>>>>> merge-fns

# Generate the line chart
result <- epiviz::line_chart(params = params, dynamic = FALSE)

<<<<<<< HEAD
 # Import df lab_data from epiviz and do some manipulation before passing for the test
 test_df <- epiviz::lab_data

 # Manipulating date within df
 test_df$specimen_date <- as.Date(test_df$specimen_date)

 # Setting start date and end date for aggregation
 start_date <- as.Date("2023-01-01")
 end_date <- as.Date("2023-12-31")

 # Summarization
 summarised_df <- test_df |>
   group_by(organism_species_name, specimen_date) |>
   summarize(count = n(), .groups = 'drop') |>
   ungroup() |>
   filter(specimen_date >= start_date & specimen_date <= end_date)

 # Ensure that summarised_df is a data frame
 summarised_df <- as.data.frame(summarised_df)

 # Create params list
 params <- list(
   dfr = summarised_df,  # Ensure this is correctly referencing the data frame
   x = "specimen_date", # Ensure this matches the column name exactly
   y = "count",         # Ensure this matches the column name exactly
   group_var = "organism_species_name",  # Ensure this matches the column name exactly
   line_colour = c("blue","green","orange"),
   line_type = c("solid", "dotted", "dashed")
 )

 # Generate the line chart
 epiviz::line_chart(params = params, dynamic = TRUE)
=======
>>>>>>> merge-fns

}
